[{"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/index.js":"1","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/App.js":"2","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Documentation.js":"3","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/About.js":"4","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Home.js":"5","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Authorization.js":"6","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Navigation.js":"7","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Header.js":"8","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/PopUp.js":"9","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/UrlExplorer.js":"10","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Footer.js":"11"},{"size":220,"mtime":1612277100192,"results":"12","hashOfConfig":"13"},{"size":882,"mtime":1612521261254,"results":"14","hashOfConfig":"13"},{"size":263,"mtime":1612391576280,"results":"15","hashOfConfig":"13"},{"size":221,"mtime":1612473313512,"results":"16","hashOfConfig":"13"},{"size":674,"mtime":1612473213415,"results":"17","hashOfConfig":"13"},{"size":2278,"mtime":1612517008464,"results":"18","hashOfConfig":"13"},{"size":1287,"mtime":1612517100906,"results":"19","hashOfConfig":"13"},{"size":402,"mtime":1612517048603,"results":"20","hashOfConfig":"13"},{"size":754,"mtime":1612517130684,"results":"21","hashOfConfig":"13"},{"size":6275,"mtime":1612531267479,"results":"22","hashOfConfig":"13"},{"size":156,"mtime":1612473682106,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1d6hfag",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/index.js",[],["48","49"],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/App.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Documentation.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/About.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Home.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Authorization.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Navigation.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Header.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/PopUp.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/UrlExplorer.js",["50","51"],"import './UrlExplorer.scss';\nimport React, {useState, useRef} from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport axios from 'axios';\n\nconst BASE_URL = process.env.REACT_APP_API_URL;\n\nfunction UrlExplorer() {\n  const [copySuccess, setCopySuccess] = useState('');\n  const textAreaRef = useRef(null);\n  const [data, setData] = useState();\n  const [urlParams, setUrlParams] = useState({\n    storedKey: localStorage.getItem('apiKey') ?? '',\n    route: '',\n    query: '',\n    url: `${BASE_URL}/api`,\n  });\n\n  const {storedKey, route, query, url} = urlParams;\n\n  function buildUrl(urlParams) {\n    const {route, storedKey, query} = urlParams;\n    return `${BASE_URL}/api${route}?key=${storedKey}${query}`;\n  }\n\n  function handleInput(e) {\n    const newParams = {...urlParams, [e.target.name]: e.target.value};\n    setUrlParams({...newParams, url: buildUrl(newParams)});\n  }\n\n  console.log('url', url);\n\n  function handleStoreKeySave(e) {\n    e.preventDefault();\n    localStorage.setItem('apiKey', storedKey);\n  }\n\n  const fetchData = async () => {\n    try {\n      const response = await axios.get(`${url}`);\n      console.log('RESPONSE:', response);\n      let jsonParsed = JSON.stringify(response.data, null, 4);\n      setData(jsonParsed);\n    } catch (error) {\n      console.log('ERROR', error.response);\n    }\n  };\n\n  // event handlers on link\n  // setRoute toggle /synths /manufacturers\n  // setQuery toggle add/(remove)\n  // setQuery = query + linkQuery\n\n  function handleLinkQuery() {\n    const oldQuery = query;\n    setUrlParams({\n      ...urlParams,\n      query: query + '&yearProduced=1980',\n    });\n\n    // handleInput(e.target.value);\n  }\n\n  function copyToClipboard(e) {\n    textAreaRef.current.select();\n    document.execCommand('copy');\n    // This is just personal preference.\n    // I prefer to not show the the whole text area selected.\n    e.target.focus();\n    setCopySuccess('Copied!');\n  }\n\n  return (\n    <>\n      <Container>\n        <Form>\n          <Form.Group>\n            <Row>\n              <Form.Label>API key</Form.Label>\n            </Row>\n            <Row>\n              <Form.Text className='text-inputs-urlExplorer'>\n                Paste your API key in here. We will add this to your URL to\n                search our database. It is also possible to save your key!\n              </Form.Text>\n            </Row>\n            <Row>\n              <InputGroup>\n                <Form.Control\n                  type='text'\n                  placeholder='Paste your API key...'\n                  name='storedKey'\n                  onChange={handleInput}\n                  value={storedKey}\n                />\n                <Button\n                  className=''\n                  variant='primary'\n                  onClick={handleStoreKeySave}\n                >\n                  Save\n                </Button>\n              </InputGroup>\n            </Row>\n          </Form.Group>\n          <Form.Group>\n            <Row>\n              <Form.Label htmlFor='inlineFormInputGroup'>API Url</Form.Label>\n            </Row>\n            <Row>\n              <Form.Text className='text-inputs-urlExplorer'>\n                Build the URL you want to explore with the dedicated fields seen\n                below and hit search to explore it. Want to explore the routes\n                in browser? Just copy the URL to clipboard and do that instead.\n              </Form.Text>\n            </Row>\n            <Row>\n              <Form.Control\n                ref={textAreaRef}\n                type='text'\n                value={url}\n                readOnly\n              ></Form.Control>\n            </Row>\n            <Row>\n              <Button className='' onClick={fetchData}>\n                Search\n              </Button>\n              <Button className='' onClick={copyToClipboard}>\n                Clipboard\n              </Button>\n              {copySuccess}\n            </Row>\n            <Row>\n              <Col className='col-3'>\n                <Form.Label>Route</Form.Label>\n              </Col>\n              <Col>\n                <Form.Label>Query</Form.Label>\n              </Col>\n            </Row>\n            <Row>\n              <Col className='col-3'>\n                <Form.Control\n                  type='text'\n                  name='route'\n                  placeholder='/synths...'\n                  onChange={handleInput}\n                  value={route}\n                />\n              </Col>\n              <Col className=''>\n                <Form.Control\n                  type='text'\n                  name='query'\n                  placeholder='&yearProduced=1980...'\n                  onChange={handleInput}\n                  value={query}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col className='col-3'>\n                <Form.Text className='text-inputs-urlExplorer'>\n                  Try /synth or /manufacturers.\n                </Form.Text>\n              </Col>\n              <Col>\n                <Form.Text className='text-inputs-urlExplorer'>\n                  You could use{' '}\n                  {\n                    <a value='&yearProduced=1980' onClick={handleLinkQuery}>\n                      &yearProduced=1980\n                    </a>\n                  }\n                  , &manufacturer=Roland, &limit=20, &offset=0 . Chain the\n                  queries with '&'. For more exploration read the doc's!\n                  'polyphony',\n                </Form.Text>\n              </Col>\n            </Row>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>JSON</Form.Label>\n            <Form.Control\n              as='textarea'\n              className='textareaExample'\n              rows={8}\n              value={data}\n              readOnly\n            />\n            <Form.Text className='text-inputs-urlExplorer'>\n              We'll never share your email with anyone else.\n            </Form.Text>\n          </Form.Group>\n        </Form>\n      </Container>\n    </>\n  );\n}\n\nexport default UrlExplorer;\n","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Footer.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":61,"column":11,"nodeType":"58","messageId":"59","endLine":61,"endColumn":19},{"ruleId":"60","severity":1,"message":"61","line":178,"column":21,"nodeType":"62","endLine":178,"endColumn":77},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'oldQuery' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]