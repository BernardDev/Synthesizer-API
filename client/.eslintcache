[{"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/index.js":"1","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/App.js":"2","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Documentation.js":"3","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/About.js":"4","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Home.js":"5","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Authorization.js":"6","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Navigation.js":"7","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Header.js":"8","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/PopUp.js":"9","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/UrlExplorer.js":"10","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Footer.js":"11","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Loading.js":"12","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Error.js":"13","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Success.js":"14","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/hooks/useRequest.js":"15","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/context/AuthContext.js":"16"},{"size":220,"mtime":1612277100192,"results":"17","hashOfConfig":"18"},{"size":1044,"mtime":1612876232983,"results":"19","hashOfConfig":"18"},{"size":263,"mtime":1612391576280,"results":"20","hashOfConfig":"18"},{"size":221,"mtime":1612473313512,"results":"21","hashOfConfig":"18"},{"size":674,"mtime":1612875345415,"results":"22","hashOfConfig":"18"},{"size":2453,"mtime":1612708401187,"results":"23","hashOfConfig":"18"},{"size":1287,"mtime":1612517100906,"results":"24","hashOfConfig":"18"},{"size":446,"mtime":1612534305598,"results":"25","hashOfConfig":"18"},{"size":1085,"mtime":1612876153453,"results":"26","hashOfConfig":"18"},{"size":9719,"mtime":1612887480511,"results":"27","hashOfConfig":"18"},{"size":156,"mtime":1612473682106,"results":"28","hashOfConfig":"18"},{"size":226,"mtime":1612785114583,"results":"29","hashOfConfig":"18"},{"size":272,"mtime":1612802722990,"results":"30","hashOfConfig":"18"},{"size":239,"mtime":1612801487727,"results":"31","hashOfConfig":"18"},{"size":1452,"mtime":1612881294264,"results":"32","hashOfConfig":"18"},{"size":506,"mtime":1612886871371,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1d6hfag",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/index.js",[],["70","71"],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/App.js",["72"],"import './App.scss';\nimport React, {useState} from 'react';\nimport {AuthProvider} from './context/AuthContext';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport Documentation from './pages/Documentation';\nimport Authorization from './pages/Authorization';\nimport Footer from './components/Footer';\nimport Navigation from './components/Navigation';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className='App'>\n          {/* <Container fluid> */}\n          <Navigation />\n          <Switch>\n            <Route path='/' exact>\n              <Home />\n            </Route>\n            <Route path='/About' component={About} />\n            <Route path='/Documentation' component={Documentation} />\n            <Route path='/Authorization' component={Authorization} />\n          </Switch>\n          <Footer />\n          {/* </Container> */}\n        </div>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Documentation.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/About.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Home.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/pages/Authorization.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Navigation.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Header.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/PopUp.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/UrlExplorer.js",["73"],"import './UrlExplorer.scss';\nimport React, {useState, useEffect, useRef, useContext} from 'react';\nimport {AuthContext} from '../context/AuthContext';\n\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Alert from 'react-bootstrap/Alert';\nimport Loading from '../components/Loading';\nimport Error from '../components/Error';\nimport Success from './Success';\nimport useRequest from '../hooks/useRequest';\n\nconst BASE_URL = process.env.REACT_APP_API_URL;\nconst INITIAL_ROUTE = '/synths';\n\nfunction UrlExplorer() {\n  const [stateAlert, setStateAlert] = useState(false);\n  const [copySuccess, setCopySuccess] = useState('');\n  const [isFetching, setIsFetching] = useState(false);\n  const {apiKey, setApiKey, saveKey} = useContext(AuthContext);\n  const textAreaRef = useRef(null);\n\n  const [urlParams, setUrlParams] = useState({\n    route: INITIAL_ROUTE,\n    query: '',\n    url: buildUrl({route: INITIAL_ROUTE, query: ''}, apiKey),\n  });\n  const {route, query, url} = urlParams;\n  const {status, code, message, data} = useRequest(url, isFetching);\n\n  useEffect(() => {\n    if (status === 'error' || status === 'success') {\n      setIsFetching(false);\n    }\n  }, [status]);\n\n  // making a seperate component\n  useEffect(() => {\n    if (stateAlert === true) {\n      window.setTimeout(() => {\n        setStateAlert(false);\n      }, 4000);\n    }\n  }, [stateAlert]);\n\n  function handleInput(e) {\n    const newParams = {...urlParams, [e.target.name]: e.target.value};\n    setUrlParams({...newParams, url: buildUrl(newParams, apiKey)});\n  }\n\n  function handleKeyInput(e) {\n    setApiKey(e.target.value);\n    setUrlParams({...urlParams, url: buildUrl(urlParams, e.target.value)});\n  }\n\n  function buildUrl(urlParams, key) {\n    const {route, query} = urlParams;\n    return `${BASE_URL}/api${route}?key=${key}${query}`;\n  }\n\n  function handleSuggestion(suggestionParams) {\n    const newParams = {...urlParams, ...suggestionParams};\n    setUrlParams({\n      ...newParams,\n      url: buildUrl(newParams, apiKey),\n    });\n  }\n\n  function copyToClipboard(e) {\n    textAreaRef.current.select();\n    document.execCommand('copy');\n    e.target.focus();\n    setCopySuccess(`URL copied to clipboard: ${urlParams.url} `);\n    setStateAlert(true);\n  }\n\n  return (\n    <>\n      <Container>\n        <Form>\n          <Form.Group>\n            <Row>\n              <Form.Label>API key</Form.Label>\n            </Row>\n            <Row>\n              <Form.Text className='text-inputs-urlExplorer'>\n                Paste your API key in here. We will add this to your URL to\n                search our database. It is also possible to save your key!\n              </Form.Text>\n            </Row>\n            <Row>\n              <InputGroup>\n                <Form.Control\n                  type='text'\n                  placeholder='Paste your API key...'\n                  name='storedKey'\n                  onChange={handleKeyInput}\n                  value={apiKey || ''}\n                />\n                <Button\n                  className=''\n                  variant='primary'\n                  onClick={() => saveKey(apiKey)}\n                >\n                  Save\n                </Button>\n              </InputGroup>\n            </Row>\n          </Form.Group>\n          <Form.Group>\n            <Row>\n              <Form.Label htmlFor='inlineFormInputGroup'>API Url</Form.Label>\n            </Row>\n            <Row>\n              <Form.Text className='text-inputs-urlExplorer'>\n                Build the URL you want to explore with the dedicated fields seen\n                below and hit search to explore it. Want to explore the routes\n                in browser? Just copy the URL to clipboard and do that instead.\n              </Form.Text>\n            </Row>\n            <Row>\n              <Form.Control\n                ref={textAreaRef}\n                type='text'\n                value={\n                  url === `${BASE_URL}/api` ? `${BASE_URL}/api/synths` : url\n                }\n                readOnly\n              ></Form.Control>\n            </Row>\n            <Row>\n              <Col md={{offset: 3, span: 3}}>\n                <Button\n                  className='btn-block'\n                  onClick={() => setIsFetching(true)}\n                  disabled={isFetching}\n                >\n                  Search\n                </Button>\n              </Col>\n              <Col md={{offset: 0, span: 3}}>\n                <Button className='btn-block' onClick={copyToClipboard}>\n                  Clipboard\n                </Button>\n              </Col>\n            </Row>\n            <Row className='row-alert alert-copy'>\n              <Alert\n                show={stateAlert}\n                className='alert-success'\n                variant='success'\n              >\n                {copySuccess}\n              </Alert>\n            </Row>\n            <Row>\n              <Col className='col-3'>\n                <Form.Label>Route</Form.Label>\n              </Col>\n              <Col>\n                <Form.Label>Query</Form.Label>\n              </Col>\n            </Row>\n            <Row>\n              <Col className='col-3'>\n                <Form.Control\n                  type='text'\n                  name='route'\n                  placeholder='/synths...'\n                  onChange={handleInput}\n                  value={route || '/synths'}\n                />\n              </Col>\n              <Col className=''>\n                <Form.Control\n                  type='text'\n                  name='query'\n                  placeholder='&yearProduced=1980...'\n                  onChange={handleInput}\n                  value={query}\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col className='col-3'>\n                <Form.Text className='text-inputs-urlExplorer'>\n                  Try{' '}\n                  {\n                    <span\n                      className='suggestion'\n                      onClick={() => handleSuggestion({route: '/synths'})}\n                    >\n                      /synths\n                    </span>\n                  }{' '}\n                  or\n                  {\n                    <span\n                      className='suggestion'\n                      onClick={() =>\n                        handleSuggestion({query: '', route: '/manufacturers'})\n                      }\n                    >\n                      /manufacturers\n                    </span>\n                  }\n                  . To get a specific use the following format{' '}\n                  {\n                    <span\n                      className='suggestion'\n                      onClick={() =>\n                        handleSuggestion({query: '', route: '/synths/1'})\n                      }\n                    >\n                      /synths/1\n                    </span>\n                  }{' '}\n                  or\n                  {\n                    <span\n                      className='suggestion'\n                      onClick={() =>\n                        handleSuggestion({\n                          query: '',\n                          route: '/synths/Jupiter-8',\n                        })\n                      }\n                    >\n                      /synths/Jupiter-8\n                    </span>\n                  }\n                  .\n                </Form.Text>\n              </Col>\n              <Col>\n                <Form.Text className='text-inputs-urlExplorer'>\n                  You could use{' '}\n                  <span\n                    className='suggestion'\n                    onClick={() =>\n                      handleSuggestion({query: '&yearProduced=1980'})\n                    }\n                  >\n                    &yearProduced=1980\n                  </span>{' '}\n                  to get synths produced in that year. Or get synths from a\n                  manufacturer:{' '}\n                  <span\n                    className='suggestion'\n                    onClick={() =>\n                      handleSuggestion({query: '&manufacturer=Roland'})\n                    }\n                  >\n                    &manufacturer=Roland\n                  </span>\n                  . You can also change default pagination options{' '}\n                  <span\n                    className='suggestion'\n                    onClick={() =>\n                      handleSuggestion({query: '&limit=20&offset=0'})\n                    }\n                  >\n                    &limit=20&offset=0\n                  </span>\n                  . Chain queries together with '&'. For more API exploration,\n                  read the doc's!\n                </Form.Text>\n              </Col>\n            </Row>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>JSON</Form.Label>\n            <Form.Text className='text-inputs-urlExplorer'>\n              Consider exploring the JSON LINK in browser LINK to.\n            </Form.Text>\n            {status === 'loading' && <Loading message={message} />}\n            {status === 'error' && <Error message={message} />}\n            {status === 'success' && <Success message={message} />}\n            <Row>\n              <Form.Control\n                as='textarea'\n                id='textareaExample'\n                rows='32'\n                value={data}\n                readOnly\n              />\n            </Row>\n          </Form.Group>\n        </Form>\n      </Container>\n    </>\n  );\n}\n\nexport default UrlExplorer;\n","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Footer.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Loading.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Error.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/components/Success.js",[],"/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/hooks/useRequest.js",["74","75","76"],"import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\nconst initialState = {\n  status: 'loading',\n  code: null,\n  message: 'Loading',\n  data: '',\n};\n\nfunction useRequest(url, isFetching) {\n  const [data, setData] = useState(initialState);\n  useEffect(() => {\n    if (!isFetching) {\n      return;\n      // prevent fetching on load, wait until user puts in meaningful url\n    }\n    const fetchData = async () => {\n      setData(initialState);\n      try {\n        // if (url !== 'http://localhost:4000/api') {\n        const data = await axios.get(`${url}`);\n        setData({\n          status: 'success',\n          code: data.status,\n          message: 'view the JSON below.',\n          data: JSON.stringify(data.data, null, 4),\n        });\n        // } else {\n\n        // }\n      } catch (error) {\n        console.log('ERROR', error.response);\n        let message = '';\n        switch (error.response?.status) {\n          case 404:\n            message = 'Not found, does this record exist?';\n            break;\n\n          default:\n            message = 'Something went wrong, try to refresh';\n            break;\n        }\n        setData({\n          status: 'error',\n          code: error.response?.status,\n          message: error.response?.data.message,\n          data: JSON.stringify(error.response?.data, null, 4),\n        });\n      }\n    };\n\n    fetchData();\n  }, [isFetching]);\n\n  return data;\n}\n\nexport default useRequest;\n","/Users/Bernard/Desktop/coaching/program/sprint 3 - api/roland-api/client/src/context/AuthContext.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":2,"column":16,"nodeType":"83","messageId":"84","endLine":2,"endColumn":24},{"ruleId":"81","severity":1,"message":"85","line":33,"column":18,"nodeType":"83","messageId":"84","endLine":33,"endColumn":22},{"ruleId":"81","severity":1,"message":"86","line":1,"column":8,"nodeType":"83","messageId":"84","endLine":1,"endColumn":13},{"ruleId":"81","severity":1,"message":"87","line":41,"column":13,"nodeType":"83","messageId":"84","endLine":41,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":54,"column":6,"nodeType":"90","endLine":54,"endColumn":18,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'code' is assigned a value but never used.","'React' is defined but never used.","'message' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["94"],"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [isFetching, url]",{"range":"97","text":"98"},[1391,1403],"[isFetching, url]"]